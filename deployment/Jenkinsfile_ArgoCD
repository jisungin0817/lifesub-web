def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'node', image: 'node:20-slim', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'sonar-scanner', image: 'sonarsource/sonar-scanner-cli:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/opt/sonar-scanner/.sonar/cache', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def namespace
        def sonarScannerHome = '/opt/sonar-scanner'

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage('Code Analysis & Quality Gate') {
            container('node') {
                sh "npm install"
                sh "npm test -- --coverage --passWithNoTests"
            }
            
            container('sonar-scanner') {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${sonarScannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=lifesub-web-dg0405 \
                        -Dsonar.sources=src \
                        -Dsonar.tests=src \
                        -Dsonar.test.inclusions=src/**/*.test.js,src/**/*.test.jsx \
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    """
                }
            }
            
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build & Push Image') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    def imagePath = "${props.registry}/${props.image_org}/lifesub-web:${imageTag}"
                    
                    sh """
                        podman login ${props.registry} --username \$USERNAME --password \$PASSWORD

                        podman build \
                            --build-arg PROJECT_FOLDER="." \
                            --build-arg BUILD_FOLDER="deployment/container" \
                            --build-arg EXPORT_PORT="${props.export_port}" \
                            --build-arg REACT_APP_MEMBER_URL="http://${props.ingress_host}/api/auth" \
                            --build-arg REACT_APP_MYSUB_URL="http://${props.ingress_host}/api/mysub" \
                            --build-arg REACT_APP_RECOMMEND_URL="http://${props.ingress_host}/api/recommend" \
                            -f deployment/container/Dockerfile-lifesub-web \
                            -t ${imagePath} .
                        
                        podman push ${imagePath}
                    """
                }
            }
        }

        stage('Update Manifest Repository') {
            container('git') {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials-dg0405',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    sh """
                        # Git 설정
                        git config --global user.name "Jenkins"
                        git config --global user.email "jenkins@company.com"
                        
                        # Manifest repository 클론
                        git clone https://\$GIT_USERNAME:\$GIT_PASSWORD@github.com/jisungin0817/lifesub-manifest.git
                        cd lifesub-manifest
                        
                        # Frontend deployment 파일 업데이트
                        deployment_file="lifesub-web/frontend-deployment.yaml"
                        if [ -f "\$deployment_file" ]; then
                            echo "Updating \$deployment_file with new image tag: ${imageTag}"
                            sed -i "s|image: ${props.registry}/${props.image_org}/lifesub-web:.*|image: ${props.registry}/${props.image_org}/lifesub-web:${imageTag}|g" "\$deployment_file"
                            
                            echo "=== Updated \$deployment_file ==="
                            cat "\$deployment_file"
                            echo "=================================="
                        else
                            echo "Error: \$deployment_file not found"
                            exit 1
                        fi
                        
                        # 변경사항 커밋 및 푸시
                        git add .
                        git commit -m "Update frontend image tag to ${imageTag} - Build #${env.BUILD_NUMBER}"
                        git push origin main
                        
                        echo "🎉 Frontend manifest repository updated successfully!"
                        echo "ArgoCD will automatically deploy the new frontend image."
                    """
                }
            }
        }

        stage('Verify ArgoCD Sync') {
            container('azure-cli') {
                sh """
                    echo "=== ArgoCD 배포 확인 안내 ==="
                    echo "1. ArgoCD UI에서 lifesub-web 애플리케이션 상태를 확인하세요."
                    echo "2. 다음 명령으로 Pod 상태를 확인할 수 있습니다:"
                    echo "   kubectl -n ${namespace} get pods -l app=lifesub-web"
                    echo "3. 새로운 이미지 태그: ${imageTag}"
                    echo "4. 서비스 외부 IP 확인:"
                    echo "   kubectl -n ${namespace} get svc lifesub-web-service"
                    echo "=================================="
                    
                    # 현재 Pod 상태 출력
                    echo "=== 현재 Frontend Pod 상태 ==="
                    kubectl -n ${namespace} get pods -l app=lifesub-web -o wide || echo "No frontend pods found or namespace not ready"
                    
                    echo "=== 현재 Service 상태 ==="
                    kubectl -n ${namespace} get svc lifesub-web-service || echo "Service not found"
                """
            }
        }
    }
}
